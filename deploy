#!/home/jacoby/lang/bin/perl

use feature qw'say' ;
use strict ;
use warnings ;
use utf8 ;

use Data::Dumper ;

use Cwd 'abs_path' ;
use File::Copy::Recursive qw{ rcopy } ;
use YAML qw{ DumpFile LoadFile } ;

my $file = join '/', ( abs_path '.' ), '.deploy' ;
my $config = config() ;

my $dispatch ;
$dispatch->{ help } = \&help ;
$dispatch->{ test } = \&test ;
$dispatch->{ set }  = \&set ;
$dispatch->{ get }  = \&get ;
$dispatch->{ to }    = \&to ;
$dispatch->{ from }  = \&from ;

if ( $dispatch->{ lc $config->{ argv }->[ 0 ] } ) {
    $dispatch->{ lc $config->{ argv }->[ 0 ] }->( $config ) ;
    }
else {
    help() ;
    }

exit ;

# ======================================================================
# Subroutines
# ----------------------------------------------------------------------

sub to {
    my $config = shift ;
    my $remote = $config->{ deploy_path } ;
    my $local = abs_path '.' ;
    say 'Remote:    ' . $remote ;
    say 'Local:     ' . $local ;
    rcopy( $local , $remote ) ;
    unlink join '/' , $remote , '.git' ;
    unlink join '/' , $remote , '.deploy' ;
    say 'Done' ;
    }

sub from {
    my $config = shift ;
    my $remote = $config->{ deploy_path } ;
    my $local = abs_path '.' ;
    say 'Remote:    ' . $remote ;
    say 'Local:     ' . $local ;
    rcopy( $remote , $local ) ;
    say 'Done' ;
    }

sub set {
    my $config = shift ;
    my $key    = $config->{ argv }->[ 1 ] ;
    my $val    = $config->{ argv }->[ 2 ] ;
    $config->{ $key } = $val ;
    delete $config->{ argv } ;
    DumpFile $file , $config ;
    say 'Set' ;
    say join "\t" , $key , defined $config->{ $key } ? $config->{ $key } : 'not set' ;
    }

sub get {
    my $config = shift ;
    my $key    = $config->{ argv }->[ 1 ] ;
    say join "\t" , $key , defined $config->{ $key } ? $config->{ $key } : 'not set' ;
    }

sub test {
    my $config = shift ;
    say Dumper $config ;
    }

sub help {
    say "HELP" ;
    }

sub config {
    if ( !-f $file ) {
        DumpFile $file , { deploy_path => '' } ;
        }
    my $config = LoadFile $file ;
    $config->{ argv } = \@ARGV ;
    return $config ;
    }
